<?php /*  */ error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_WARNING & ~E_STRICT); header("Content-Security-Policy: default-src 'self'; connect-src 'self'; script-src 'unsafe-inline'; style-src data: 'unsafe-inline'; img-src data:; frame-ancestors 'none'; form-action 'self'"); header("X-Frame-Options: deny"); if (!defined('PHP_VERSION_ID')) { $version = explode('.', PHP_VERSION); define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + $version[2])); if (!defined('PHP_MAJOR_VERSION')) { define('PHP_MAJOR_VERSION', ($version[0])); } if (!defined('PHP_MINOR_VERSION')) { define('PHP_MINOR_VERSION', ($version[1])); } if (!defined('PHP_RELEASE_VERSION')) { define('PHP_RELEASE_VERSION', ($version[2])); } } $NEEDED_PHP_VERSION = 70200; $NEEDED_EXTENSIONS = array('curl', 'json', 'zip'); function checkAlreadyInstalled($subdir) { global $root; $path = $root.DIRECTORY_SEPARATOR.$subdir; if (file_exists($path) && is_dir($path) && is_file($path.DIRECTORY_SEPARATOR.'index.php')) { return true; } else { return false; } } function http_redirect($url, $code = 307) { $https = !empty($_SERVER['HTTPS']); $i = strpos($url, '://'); if ($i !== false and $i < 8) { $fullurl = $url; } else if ($url[0] == '/') { $fullurl = ($https ? 'https://' : 'http://') . $_SERVER['HTTP_HOST'] . rtrim(dirname($_SERVER['SCRIPT_NAME']), '/') . $url; } else { $fullurl = ($https ? 'https://' : 'http://') . $_SERVER['HTTP_HOST'] . rtrim(dirname($_SERVER['SCRIPT_NAME']), '/') . '/' . $url; } http_response_code($code); header("Location: " . $fullurl); echo '<html><body><a href="' . htmlspecialchars($fullurl) . '">continue</a></body></html>'; exit(); } /** * @param array $data * @param int $code HTTP-Statuscode * @return void exit() */ function ajaxExit($data, $code=200) { http_response_code($code); header('Content-Type: application/json'); echo json_encode($data); exit(); } function doInstall($post, $ajax=false, $offset=0, $timeout=null) { global $errors, $root, $subdirectory, $zipfile; $time = time(); $subdirectory = ltrim($post['subdirectory'], '/'); if (!preg_match('/^([\w0-9_ -][\w0-9_ .-]*|\.)\/?$/ui',$subdirectory)) { $errors[] = 'Please specify a valid subdirectory.'; if ($ajax) { ajaxExit(['status'=>'error', 'done'=>true, 'error'=>$errors[0]], 422); } else { return; } } $path = $root.DIRECTORY_SEPARATOR.$subdirectory; if (!is_dir($path)) { if (!@mkdir($path)) { $errors[] = 'Das Verzeichnis konnte nicht angelegt werden. Bitte überprüfen Sie die Rechte oder erstellen Sie das Verzeichnis manuell.'; if ($ajax) { ajaxExit(['status'=>'error', 'done'=>true, 'error'=>$errors[0]], 422); } else { return; } } } if (!is_writable($path)) { $errors[] = 'Das Verzeichnis '.$path.' ist nicht beschreibar. Bitte setzten Sie die Rechte auf 777.'; if ($ajax) { ajaxExit(['status'=>'error', 'done'=>true, 'error'=>$errors[0]], 422); } else { return; } } if ($offset == 0 and checkAlreadyInstalled($subdirectory)) { if ($ajax) { ajaxExit(['status'=>'already installed', 'done'=>true]); } else { http_redirect('/'.$subdirectory, 303); return; } } $zip = new ZipArchive(); $result = $zip->open($zipfile); try { if ($result !== true) { switch ($result) { case ZipArchive::ER_INCONS: case ZipArchive::ER_NOZIP: case ZipArchive::ER_INVAL: case ZipArchive::ER_READ: case ZipArchive::ER_SEEK: case ZipArchive::ER_NOENT: $errors[] = 'Setuparchiv ist korrupt. Bitte erneut downloaden oder versuchen Sie die ZIP-Datei mit dem Uploadtyp Binär erneut hochzuladen.'; break; case ZipArchive::ER_MEMORY: $errors[] = 'Speicherlimit erreicht. Bitte erhöhen Sie das PHP memory limit.'; break; case ZipArchive::ER_OPEN: $errors[] = 'Das Downloadarchiv kann nicht geöffnet werden. Bitte überprüfen Sie die Dateirechte.'; break; default: $errors[] = 'Setuparchiv ist korrupt. Bitte erneut downloaden oder versuchen Sie die ZIP-Datei mit dem Uploadtyp Binär erneut hochzuladen.'; } if ($ajax) { ajaxExit(['status'=>'error', 'done'=>true, 'error'=>$errors[0]], 422); } else { return; } } umask(0); $umask = umask(); $countFiles = $zip->numFiles; for ($idx=$offset; $idx < $countFiles; $idx++) { set_time_limit(300); $stat = $zip->statIndex($idx); $entry = $stat['name']; if ($entry === '' or $entry[0] === '/' or strpos($entry, '../') !== false) { continue; } $dest = preg_replace('%^[^/]*%', $path, $entry); if (substr($entry, -1) === '/') { @mkdir($dest, 0777 & ~$umask); } else { if ($stat['size'] <= 1024*1024) { $data = @$zip->getFromIndex($idx); if ($data === false) { $errors[] = 'Extraktion von '.$entry.' fehlgeschlagen. Setup abgebrochen.'; if ($ajax) { ajaxExit(['status'=>'error', 'done'=>true, 'error'=>$errors[0]], 500); } else { return; } } if (@file_put_contents($dest, $data) === false) { $errors[] = 'Schreiben von '.$dest.' fehlgeschlagen. Setup abgebrochen.'; if ($ajax) { ajaxExit(['status'=>'error', 'done'=>true, 'error'=>$errors[0]], 500); } else { return; } } $data = null; } else { $sourceFd = @$zip->getStream($entry); if (!$sourceFd) { $errors[] = 'Extraktion von '.$entry.' fehlgeschlagen. Setup abgebrochen.'; if ($ajax) { ajaxExit(['status'=>'error', 'done'=>true, 'error'=>$errors[0]], 500); } else { return; } } $destFd = @fopen($dest, 'wb'); if (!$destFd) { $errors[] = 'Schreiben von '.$dest.' fehlgeschlagen. Setup abgebrochen.'; if ($ajax) { ajaxExit(['status'=>'error', 'done'=>true, 'error'=>$errors[0]], 500); } else { return; } } try { while (!feof($sourceFd)) { fwrite($destFd, fread($sourceFd, 16384)); } } finally { fclose($sourceFd); fclose($destFd); } } if (strpos($entry, '/bin/') !== false) { @chmod($dest, 0777 & ~$umask); } else { @chmod($dest, 0666 & ~$umask); } } if ($timeout !== null and (time()-$time >= 2)) { if ($idx < $countFiles) { ajaxExit(['status'=>'success', 'done'=>false, 'nextOffset'=>$idx+1, 'total'=>$countFiles], 200); } else { ajaxExit(['status'=>'success', 'done'=>true, 'total'=>$countFiles], 200); } } } } finally { $zip->close(); } if ($ajax) { ajaxExit(['status'=>'success', 'done'=>true]); } else { http_redirect('/'.$subdirectory, 303); } return; } $root = realpath(dirname(__FILE__)); $subdirectory = 'ccm19/'; $zipfile = $root.DIRECTORY_SEPARATOR.'ccm19.zip'; $errors = array(); $warnings = array(); $can_install = true; if (checkAlreadyInstalled($subdirectory)) { $errors[] = 'Es liegt schon eine Installation vor unter: '.$subdirectory.'.'; $can_install = false; } if (!file_exists($zipfile) or !is_file($zipfile)) { $errors[] = 'Das Installationsarchiv ccm19.zip fehlt.'; $can_install = false; } elseif (!is_readable($zipfile)) { $errors[] = 'Das Installationsarchiv ccm19.zip ist nicht lesbar. Bitte prüfen Sie die Dateirechte.'; $can_install = false; } if (PHP_VERSION_ID < $NEEDED_PHP_VERSION) { $errors[] = 'Auf diesem Server ist PHP '.PHP_MAJOR_VERSION .'.'.PHP_MINOR_VERSION.'.'.PHP_RELEASE_VERSION.' installiert. CCM19 benötigt aber mindestens PHP 7.2.'; $can_install = false; } foreach ($NEEDED_EXTENSIONS as $name) { if (phpversion($name) === false and extension_loaded($name) === false) { $errors[] = 'Die PHP-Erweiterung „'.$name.'“ wird benötigt, ist aber auf dem Server nicht installiert.'; $can_install = false; } } if (function_exists('apache_get_modules')) { $modules = apache_get_modules(); } else { $modules = null; } if (is_array($modules)) { if (in_array('mod_rewrite', $modules) == false) { $errors[] = 'Das Apache-Modul „mod_rewrite“ wird benötigt, konnte aber nicht gefunden werden.'; } } else { $warnings[] = 'Der Zustand des Rewrite-Apache-Moduls konnte nicht überprüft werden. Bitte stellen Sie sicher, dass „mod_rewrite“ aktiv ist.'; } if ($_SERVER['REQUEST_METHOD'] === 'POST') { if (isset($_GET['offset']) && isset($_GET['timeout'])) { doInstall($_POST, true, (int)$_GET['offset'], (int)$_GET['timeout']); } elseif ($can_install) { doInstall($_POST); } } ?><!DOCTYPE html> <html> <head> <meta charset="UTF-8"> <title>CCM19 Setup</title> <meta name="description" content=""> <meta name="author" content="Papoo Software &amp; Media GmbH"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta http-equiv="X-UA-Compatible" content="ie=edge"> <style type="text/css">/*<![CDATA[*/ @keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } } *, ::before, ::after { -webkit-box-sizing: inherit; -moz-box-sizing: inherit; box-sizing: inherit; } header, article, aside, details, footer, section, main { display: block; } strong { font-weight: 600; } p { margin: 0 0 9.5px; } html { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; height: 100%; font-size: 10px; font-family: "Open Sans", Helvetica, Arial, sans-serif; } body { width: 100%; height: 100%; margin: 0; padding: 0; background: #e9e9e9; overflow: auto; } #main { background: #2e313d; color: #efefef; overflow: hidden; position: relative; min-height: 100%; animation-duration: 1s; animation-fill-mode: both; animation-name: fadeIn } #content_wrapper { margin: 0; position: relative; left: 0; display: block; } #content { padding: 25px 20px 50px 21px; } .admin-form { position: relative; width: 100%; margin: 0 auto; margin-top: 5%; line-height: 1.231; font-weight: 400; font-size: 14px; max-width: 500px; } h1 { margin: 30px 0 30px; font-size: 28px; text-align: center; font-family: inherit; color: inherit; font-weight: 600; line-height: 1.1; text-rendering: optimizelegibility; } .admin-form .panel { background-color: #fff; border: 1px solid #ddd; margin-bottom: 25px; position: relative; border-radius: 3px; } .admin-form .panel-body { border: 0; background: #fafafa; color: #666; padding: 25px; padding-bottom: 15px; position: relative; } .admin-form .panel-footer { background: #f2f2f2; padding: 12px 13px; border: 0; border-top: 1px solid #ddd; border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; } button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; } .pull-right { float: right !important; } .mr10 { margin-right: 10px !important; } button { text-transform: none; overflow: visible; font: inherit; margin: 0; line-height: inherit; font-weight: 400; font-size: 14px; color: #626262; } .button { outline: none; transition: all 0.5s ease-in-out; border-radius: 3px; display: inline-block; background: #dbdbdb; vertical-align: top; text-align: center; cursor: pointer; padding: 0 18px; font-size: 15px; line-height: 42px; height: 42px; border: 0; user-select: none; } .btn-primary { background-color: #10a2d2; color: #fff; text-shadow: 0 1px rgba(0,0,0,0.08); } .clearfix::after { content: ' '; display: table; clear: both; } .section { margin-bottom: 22px; } .field-label { display: block; margin: 0; margin-bottom: 10px; font-size: 18px; color: #999; outline: none; font-weight: 400; } .field { display: block; position: relative; } .gui-input { position: relative; vertical-align:top; border: 1px solid #ddd; display: inline-block; color: #626262; outline: none; height: 42px; width: 100%; padding: 10px; transition: all 0.5s ease-in-out; -moz-appearance: none; -webkit-appearance: none; appearance: none; border-radius: 3px; margin: 0; font: inherit; font-size: 14px; font-weight: 400; } .alert { color: #fff; font-size: 14px; padding: 15px; margin-bottom: 19px; border: 1px solid rgba(0,0,0,0.1); border-radius: 4px; } .alert-danger { background: #ed7764; } .alert-warning { background: #f8c969; } button.disabled, button:disabled { opacity: 0.5; cursor: default; } /*]]>*/</style> </head> <body class="external-page external-alt sb-l-c sb-r-c"> <div id="main" class="animated fadeIn bg-primary"> <main id="content_wrapper"> <section id="content"> <div class="admin-form theme-info mw500"> <h1 class="mb30 fs28 text-center"> Setup | <strong>CCM19</strong> </h1> <form class="panel mb25" action="" method="post" id="form"> <div class="panel-body bg-light p25 pb15"> <?php foreach ($errors as $error): ?> <div class="alert alert-danger" role="alert"><?php echo htmlspecialchars($error); ?></div> <?php endforeach; ?> <?php foreach ($warnings as $warning): ?> <div class="alert alert-warning" role="alert"><?php echo htmlspecialchars($warning); ?></div> <?php endforeach; ?> <div class="section"> <label for="subdirectory" class="field-label fs18 mb10">Zielpfad</label> <p>Legen Sie bitte ein Verzeichnis mit dem Namen ccm19 und stellen Sie Schreibrechte für das Verzeichnis her.</p> <label class="field"> <input type="text" name="subdirectory" value="<?php echo htmlspecialchars($subdirectory); ?>" id="subdirectory" class="gui-input" placeholder="Tragen Sie einem Pfad ein wo CCM19 installiert werden soll" required="required" <?php if (!$can_install) {echo ' disabled="disabled"';}?> /> </label> </div> <p><strong>Denken Sie daran dass die Setupdateien nach der Installation gelöscht werden müssen.</strong></p> </div> <div class="panel-footer clearfix"> <button type="submit" id="submit-btn" class="button btn-primary mr10 pull-right"<?php if (!$can_install) {echo ' disabled="disabled"';}?>>Jetzt installieren</button> </div> </form> </div> </section> </main> </div> <script type="text/javascript">/*<![CDATA[*/ "use strict"; function ajaxPost(url, data, onsuccess, onfailure) { var req; function onreadystatechange () { if (req.readyState == 4) { req.onreadystatechange = null; if (req.status >= 200 && req.status < 300) { if (onsuccess) { var data; try { data = JSON.parse(req.responseText); req.responseJSON = data; } catch (e) { if (onfailure) { onfailure.call(req, req, req.statusText, e); } return; } onsuccess.call(req, data, req.statusText, req); } } else { if (onfailure) { try { data = JSON.parse(req.responseText); req.responseJSON = data; } catch (_) { } onfailure.call(req, req, req.statusText, req.statusText); } } } }; req = new XMLHttpRequest(); req.open('POST', url, true); req.responseJSON = null; req.onreadystatechange = onreadystatechange; req.send(data); } function showError(msg) { var div = document.getElementById('error-message'); if (msg === null) { if (div) { div.parentNode.removeChild(div); } return; } if (!div) { div = document.createElement('div'); div.setAttribute('role', 'alert'); div.setAttribute('class', 'alert alert-danger'); div.setAttribute('id', 'error-message'); var container = document.getElementsByClassName('panel-body')[0]; container.insertBefore(div, container.childNodes[0]); } if ('textContent' in div) { div.textContent = msg; } else { div.innerText = msg; } } document.getElementById('form').onsubmit = function (evt) { var btn = document.getElementById('submit-btn'); btn.disabled = true; btn.textContent = 'Bitte warten...'; var form = new FormData(document.getElementById('form')); var subdir = document.getElementById('subdirectory').value; showError(null); function doInstall(offset) { ajaxPost('?offset='+(offset)+'&timeout=2', form, function (data) { if (data.done) { btn.textContent = 'Bitte warten... 100 %'; setTimeout(function () { location.href = subdir; }, 200); } else { var percent = (data.nextOffset/data.total*100)|0; btn.textContent = 'Bitte warten... '+percent+' %'; doInstall(data.nextOffset); } }, function (req, status, error) { btn.textContent = 'Erneut versuchen'; btn.disabled = false; if (req.responseJSON && 'error' in req.responseJSON) { showError(req.responseJSON.error); } else { showError('Fehler: '+error); alert('Fehler: '+error); } }); } doInstall(0); return false; } /*]]>*/</script> </body> </html> <?php exit(); __halt_compiler() ?> 